import components.naturalnumber.NaturalNumber;
import components.naturalnumber.NaturalNumber2;

/**
 * Controller class.
 *
 * @author Put your name here
 */
public final class NNCalcController1 implements NNCalcController {

    /**
     * Model object.
     */
    private final NNCalcModel model;

    /**
     * View object.
     */
    private final NNCalcView view;

    /**
     * Useful constants.
     */
    private static final NaturalNumber TWO = new NaturalNumber2(2),
            INT_LIMIT = new NaturalNumber2(Integer.MAX_VALUE);

    /**
     * Updates this.view to display this.model, and to allow only operations
     * that are legal given this.model.
     *
     * @param model
     *            the model
     * @param view
     *            the view
     * @ensures [view has been updated to be consistent with model]
     */
    private static void updateViewToMatchModel(NNCalcModel model,
            NNCalcView view) {

        /*
         * Get model info
         */
        NaturalNumber two = new NaturalNumber2(2);
        NaturalNumber bottom = model.bottom();
        NaturalNumber top = model.top();

        if (bottom.compareTo(top) > 0) {
            view.updateSubtractAllowed(false);
        } else {
            view.updateSubtractAllowed(true);
        }
        if (bottom.isZero()) {
            view.updateDivideAllowed(false);
        } else {
            view.updateDivideAllowed(true);
        }
        if (bottom.compareTo(two) < 0) {
            view.updateRootAllowed(false);
        } else {
            view.updateRootAllowed(true);
        }
        if (bottom.compareTo(INT_LIMIT) > 0) {
            view.updateRootAllowed(false);
            view.updatePowerAllowed(false);

        } else {
            view.updateRootAllowed(true);
            view.updatePowerAllowed(true);
        }

        /*
         * Update view to reflect changes in model
         */
        view.updateBottomDisplay(bottom);
        view.updateTopDisplay(top);

    }

    /**
     * Constructor.
     *
     * @param model
     *            model to connect to
     * @param view
     *            view to connect to
     */
    public NNCalcController1(NNCalcModel model, NNCalcView view) {
        this.model = model;
        this.view = view;
        updateViewToMatchModel(model, view);
    }

    @Override
    public void processClearEvent() {
        /*
         * Get alias to bottom from model
         */
        NaturalNumber bottom = this.model.bottom();
        /*
         * Update model in response to this event
         */
        bottom.clear();
        /*
         * Update view to reflect changes in model
         */
        updateViewToMatchModel(this.model, this.view);
    }

    @Override
    public void processSwapEvent() {
        /*
         * Get aliases to top and bottom from model
         */
        NaturalNumber top = this.model.top();
        NaturalNumber bottom = this.model.bottom();
        /*
         * Update model in response to this event
         */
        NaturalNumber temp = top.newInstance();
        temp.transferFrom(top);
        top.transferFrom(bottom);
        bottom.transferFrom(temp);
        /*
         * Update view to reflect changes in model
         */
        updateViewToMatchModel(this.model, this.view);
    }

    @Override
    public void processEnterEvent() {

        NaturalNumber top = this.model.top();
        NaturalNumber bottom = this.model.bottom();
        top.copyFrom(bottom);
        updateViewToMatchModel(this.model, this.view);

    }

    @Override
    public void processAddEvent() {

        NaturalNumber top = this.model.top();
        NaturalNumber bottom = this.model.bottom();
        bottom.add(top);
        top.clear();
        updateViewToMatchModel(this.model, this.view);

    }

    @Override
    public void processSubtractEvent() {

        NaturalNumber top = this.model.top();
        NaturalNumber bottom = this.model.bottom();
        top.subtract(bottom);
        bottom.transferFrom(top);
        updateViewToMatchModel(this.model, this.view);

    }

    @Override
    public void processMultiplyEvent() {
        NaturalNumber top = this.model.top();
        NaturalNumber bottom = this.model.bottom();

        bottom.multiply(top);
        top.clear();
        updateViewToMatchModel(this.model, this.view);

    }

    @Override
    public void processDivideEvent() {

        NaturalNumber top = this.model.top();
        NaturalNumber bottom = this.model.bottom();
        top.divide(bottom);
        bottom.transferFrom(top);
        updateViewToMatchModel(this.model, this.view);

    }

    @Override
    public void processPowerEvent() {

        NaturalNumber top = this.model.top();
        NaturalNumber bottom = this.model.bottom();
        top.power(bottom.toInt());
        bottom.transferFrom(top);

        updateViewToMatchModel(this.model, this.view);

    }

    @Override
    public void processRootEvent() {
        NaturalNumber num = this.model.top();
        NaturalNumber root = this.model.bottom();
        NaturalNumber low = new NaturalNumber2(0);
        num.increment();
        NaturalNumber high = new NaturalNumber2();
        high.copyFrom(num);
        NaturalNumber difference = new NaturalNumber2();
        difference.copyFrom(high);
        num.decrement();
        NaturalNumber one = new NaturalNumber2(1);
        NaturalNumber two = new NaturalNumber2(2);
        NaturalNumber middle = new NaturalNumber2();
        NaturalNumber highTest = new NaturalNumber2();
        highTest.copyFrom(high);
        highTest.add(low);
        highTest.divide(two);
        middle.copyFrom(highTest);
        NaturalNumber test = new NaturalNumber2();
        test.copyFrom(middle);
        test.power(root.toInt());
        //using interval halving root algorithm
        while (difference.compareTo(one) > 0) {
            if (num.compareTo(test) < 0) {
                high.copyFrom(middle);
            } else {
                low.copyFrom(middle);
            }
            high.add(low);
            highTest.copyFrom(high);
            high.subtract(low);
            highTest.divide(two);
            middle.copyFrom(highTest);
            high.subtract(low);
            difference.copyFrom(high);
            high.add(low);
            test.copyFrom(middle);
            test.power(root.toInt());
        }
        num.copyFrom(low);
        root.transferFrom(num);

        updateViewToMatchModel(this.model, this.view);
    }

    @Override
    public void processAddNewDigitEvent(int digit) {

        NaturalNumber bottom = this.model.bottom();
        bottom.multiplyBy10(digit);
        updateViewToMatchModel(this.model, this.view);

    }

}
